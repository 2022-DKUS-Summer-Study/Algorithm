-------------------------------
Algorithm-study #0
Lim Chansol
Dankook University 32183832
Date : 2022-07-03
-------------------------------

Study : 사용할 언어에 대한 자료구조 조사
삽입,삭제,탐색등에 대한 시간복잡도&사용법, 어떤 자료구조를 구현한 것인지에 대해 조사

사용 언어 : JAVA


JCF(Java Collection Framework)

JAVA내에서 데이터를 저장할때 이용하는 자료구조들을 한데 모아 편하게 관리하기 위에 만든 프레임워크


Java Collection구조

lterable - Collection - List,Queue,Set
Map - HashMap,Hashtable,TreeMap
------------------------------------------------------------------------------------------------------------
List-

중복 O , 순서 보장 O, 정렬 기능 O index 식별자로 순서를 가지며 순차적 유일성을 가짐.

Stack(스택)

LIFO구조의 후입선출 구조를 가지고 있음 한 방향에서만 data삭제,삽입
synchronized 키워드가 붙어있기 때문에 Thread-safe, 그렇기에 멀티 스레드 아니면 overhead(간접비)가 많이 발생
이거 쓰는거보다 ArrayDeque쓰는게 더 이득

push    O(1)
pop     O(1)
peak    O(1)
search  O(n)

ArrayList(배열리스트)

data추가,삭제 시 임시배열 생성하여 data복사
따라서 data의 양이 많아 질 수록 성능저하가 심함 (추가,삭제 시)
대신 data의 index값을 이용하여 data 탐색시 용이함

add               O(1)
remove            O(n)
get               O(1)
Contains(조회)    O(n)
iterator.remove   O(n)


LinkedList(연결리스트)

각 노드들이 이전과 다음 노드의 정보로만 연결되어 있음.
따라서 data를 삽입,삭제할 경우에는 빠르게 처리할 수 있음 (O(1))
대신 데이터 탐색시에는 처음부터 노드를 순회해야 하므로 시간이 오래 걸림


add             O(1)
remove          O(1)
get             O(n)
Contains        O(n)
iterator.remove O(1)



Vector(벡터)

최근에 잘 사용하지 않는다고 해서 있다고만 조사함.
사용은 가능 (호환성 대비)

------------------------------------------------------------------------------------------------------------
Queue-

FIFO(선입선출) 구조로 front와 rear를 구분하여 연산(삽입,삭제)등을 처리한다.
그래프의 넓이 우선 탐색(BFS)나 컴퓨터의 버퍼에 주로 사용


Deque(양 방향 큐)

기존의 queue와는 달리 front,rear 모두 삽입,삭제 연산이 가능.
Stack의 상위 호환이라고도 함

(여기서 add말고 offer을 주로 사용한다 함. add는 deque에 값이 존재안할경우 에러떠서. 추후 조사 후 적을 예정)

add       O(1)
remove    O(1)
peak      O(1)


priorityQueue(우선순위 큐, 힙)

완전 이진 트리 구조 형태를 나타냄, 일반적으로 배열로 구성(but 일반적으로 0번 index는 사용하지 않음. 트리 구조의 특성을 따르기 때문)
NULL허용x, 우선순위에 따라 정렬

offer(입력)    O(log n)
peek(=get)     O(1)
poll(반환)     O(log n)
size           O(1)


ArrayDeque

size제한이 없는 가변 배열, NULL 허용x
stack 목적으로 구현하였을 때 기존의 Stack보다 빠르고, Queue 목적으로 구현하였을 때 LinkedList보다 빠름
원형큐형식이기 때문

add       O(1)
remove    O(1)
peak      O(1)


------------------------------------------------------------------------------------------------------------
Set-

중복 x , 순서 보장 x, 정렬 기능 x(TreeSet은 가능) data의 중복이 불가능으로 data가 유일성을 가짐
중복을 자동으로 제거해준다는 점에서 용도를 다양하게 사용 가능

HashSet

HashMap과 Set 인터페이스를 상속하여 빠른 연산이 가능한 자료형
앞에서 말했듯이 정렬 기능x (순서 없이 저장)
NULL 값을 허용


add                                 O(1)
contains                            O(1)
next(Iterator이용하여 출력시)        O(h/n) h는 테이블 용량


TreeSet

입력과 동시에 오름차순으로 정렬(객체 기준 정렬)
따라서 구조 자체가 느리다. 대신 최댓값,최솟값 반환 메소드, 통계메소드를 지원함
NULL값을 허용하지않음



add        O(log n)
contains   O(log n)
next       O(long n)



------------------------------------------------------------------------------------------------------------

Map-

중복 x (key와 value중 value는 중복가능), 순서 보장 x, 정렬 기능 x
중복을 자동으로 제거해준다는 점에서 용도를 다양하게 사용 가능
삽입,삭제,조회 연산이 매우 빠르지만 순서보장과 정렬이 불가하다는 단점을 가짐
이를 보완하기 위해 아래 3가지 구조가 생성



HashMap

가장 빠른 자료구조 but 순서보장,정렬 x
순서 상관없이 저장,NULL허용 (Key값으로는 하나,Value값으로는 다수 가능)

put           O(1)
remove        O(1)
get           O(1)
containsKey   O(1)
next          O(h/n) h는 테이블 용량


LinkedHashMap

data를 순서대로 저장. NULL값 허용 (Key값으로는 하나,Value값으로는 다수 가능)

put           O(1)
remove        O(1)
get           O(1)
containsKey   O(1)
next          O(1)



TreeMap

data를 추가할때 오름차순으로 자동정렬. 따라서 삽입 삭제가 굉장히 느림.
NULL값 허용 x

put           O(log n)
remove        O(log n)
get           O(log n)
containsKey   O(log n)
next          O(log n)


------------------------------------------------------------------------------------------------------------

test
